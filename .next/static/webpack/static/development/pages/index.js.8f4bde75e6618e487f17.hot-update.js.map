{"version":3,"file":"static/webpack/static/development/pages/index.js.8f4bde75e6618e487f17.hot-update.js","sources":["webpack:///./functions.js"],"sourcesContent":["export const getFloatValue = (string) => {\n  let floatVal = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0]\n  console.warn(floatVal)\n  return (null !== floatVal) ? parseFloat( parseFloat(floatVal).toFixed(2)): ''\n} \n\n/**\n * @param  {} product\n * @param  {} =>{letproductPrice=getFloatValue(product.price\n * @param  {[]} letnewCart={products\n * @param  {1} totalProductsNumber\n * @param  {productPrice}constnewProduct=createNewProduct(product} totalProductsPrice\n * @param  {} productPrice\n * @param  {} 1\n * @param  {} newCart.products.push(newProduct\n * @param  {} localStorage.setItem('soap-cart'\n * @param  {} JSON.stringify(newCart\n */\nexport const addFirstProduct = (product) => {\n  let productPrice = getFloatValue(product.price)\n  \n  let newCart = {\n    products: [],\n    totalProductsNumber: 1,\n    totalProductsPrice: productPrice\n  }\n\n  const newProduct = createNewProduct(product, productPrice, 1)\n  newCart.products.push(newProduct)\n  localStorage.setItem('soap-cart', JSON.stringify(newCart))\n  return newCart\n}\n\n/** Create a new product object\n * @param  {} product\n * @param  {} productPrice\n * @param  {} qty\n * @param  {product.productId} =>{return{productID\n * @param  {product.image.sourceUrl} image\n * @param  {product.name} name\n * @param  {productPrice} price\n * @param  {qty} qty\n * @param  {parseFloat((productPrice*qty} totalPrice\n */\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productID: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  }\n}\n\nexport const updateCart = (existingCart, product, qty, newQuantity = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qty, newQuantity) \n  const addTotal = (total, item) => {\n    total.totalPrice += item.totalPrice\n    total.qty += item.qty\n\n    return total\n  }\n\n  let total = updatedProducts.reduce(addTotal, {totalPrice: 0, qty: 0})\n\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsNumber: parseInt(total.qty),\n    totalProductsPrice: parseInt(total.totalPrice)\n  }\n\n  localStorage.setItem('soap-cart', JSON.stringify(updatedCart))\n  return updatedCart\n}\n\n/** Get updated cart array\n * Update product if it exists\n * add the new product to existing cart\n * @param  {} existingCartProducts\n * @param  {} newProduct\n * @param  {} qty\n * @param  {} newQuantity=false\n * @param  {} =>{constproductExistsIndex=isProductInCart(existingCartProducts\n * @param  {} newProduct.productID\n * @param  {} if(productExistsIndex>-1\n * @param  {} {letupdatedProducts=existingCartProductsletupdatedProduct=updatedProducts[productExistsIndex];updatedProduct.qty=(newQuantity?parseInt(newQuantity\n */\nexport const getUpdatedProducts = (existingCartProducts, product, qty, newQuantity = false) => {\n  // Check if product is already in cart\n  const productExistsIndex = isProductInCart(existingCartProducts, product.productID)\n  // if in cart update quantity by qty and recalculate total price\n  if (productExistsIndex > -1) {\n    let updatedProducts = existingCartProducts\n    let updatedProduct = updatedProducts[productExistsIndex];\n\n    updatedProduct.qty = (newQuantity ? parseInt(newQuantity) : parseInt(updatedProduct.qty +  qty))  \n    updatedProduct.totalPrice = parseFloat(updatedProduct.price * updatedProduct.qty).toFixed(2)\n    return updatedProduct\n  } else {\n  // if not create new product and push onto array of products\n    let productPrice = getFloatValue(product.price)\n    let newProduct = createNewProduct(product, productPrice, qty)\n    existingCartProducts.push(newProduct)\n    return existingCartProducts\n  }\n}\n\n/** Return index of product is it exists in the cart\n * @param  {} existingCartProducts\n * @param  {} newProductId\n * @param  {} =>{returnItemThatExists=(item\n * @param  {} index\n * @param  {} =>{if(item.productID===newProductId\n * @param  {} {returnitem}}constnewArray=existingCartProducts.filter(returnItemThatExists\n * @param  {} returnexistingCartProducts.indexOf(newArray[0]\n */\nexport const isProductInCart = (existingCartProducts, newProductId) => {\n    const returnItemThatExists = (item, index) => {\n      if (item.productID === newProductId) {\n        return item\n      }\n    }\n\n    const newArray = existingCartProducts.filter(returnItemThatExists)\n\n    return existingCartProducts.indexOf(newArray[0])\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAYA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;;;;;;;;;;;;;AAYA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}