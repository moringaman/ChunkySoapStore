{"ast":null,"code":"var _jsxFileName = \"/home/webnostix/Codebase/REACT/woo-next/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout'; // import fetch from 'isomorphic-unfetch'\n// import clientConfig from '../wooConfig'\n\nimport client from '../components/ApolloClient';\nimport Product from '../components/Product';\nimport gql from 'graphql-tag';\nimport '../styles/Style.css';\nconst PRODUCTS_QUERY = gql`query{\n    products(first: 20) {\n    nodes {\n      productId\n      averageRating\n      slug\n      description\n      name\n      image {\n        uri\n        sourceUrl\n      }\n      ... on SimpleProduct {\n        id\n        name\n        price\n      }\n    }\n  }\n}`;\n\nconst Index = props => {\n  // console.warn(props)\n  const {\n    products\n  } = props;\n  console.log(products.length);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"product-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, products.length > 0 ? products.map(product => __jsx(Product, {\n    product: product,\n    key: product.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })) : ''));\n};\n\nIndex.getInitialProps = async () => {\n  // GRAPHQL METHOD\n  const result = await client.query({\n    query: PRODUCTS_QUERY\n  });\n  return {\n    products: result.data.products.nodes\n  }; // REST API METHOD\n  // const res = await fetch(`${clientConfig.siteUrl}/getProducts`)\n  // const ProductData = await res.json()\n  // return {\n  //   products: JSON.parse(ProductData)\n  // }\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/webnostix/Codebase/REACT/woo-next/pages/index.js"],"names":["Layout","client","Product","gql","PRODUCTS_QUERY","Index","props","products","console","log","length","map","product","id","getInitialProps","result","query","data","nodes"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB,C,CACA;AACA;;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAO,qBAAP;AAEA,MAAMC,cAAc,GAAGD,GAAI;;;;;;;;;;;;;;;;;;;EAA3B;;AAoBA,MAAME,KAAK,GAAIC,KAAD,IAAW;AACvB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,MAArB;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QAAQ,CAACG,MAAT,GAAkB,CAAlB,GAAuBH,QAAQ,CAACI,GAAT,CAAaC,OAAO,IAAI,MAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,OAAlB;AAA2B,IAAA,GAAG,EAAEA,OAAO,CAACC,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CAAvB,GAAkG,EADrG,CADF,CADF;AAOD,CAXD;;AAaAR,KAAK,CAACS,eAAN,GAAwB,YAAY;AAClC;AACA,QAAMC,MAAM,GAAG,MAAMd,MAAM,CAACe,KAAP,CAAa;AAAEA,IAAAA,KAAK,EAAEZ;AAAT,GAAb,CAArB;AAEA,SAAO;AACLG,IAAAA,QAAQ,EAAEQ,MAAM,CAACE,IAAP,CAAYV,QAAZ,CAAqBW;AAD1B,GAAP,CAJkC,CAOlC;AACA;AACA;AACA;AACA;AACA;AACD,CAbD;;AAeA,eAAeb,KAAf","sourcesContent":["import Layout from '../components/Layout'\n// import fetch from 'isomorphic-unfetch'\n// import clientConfig from '../wooConfig'\nimport client from '../components/ApolloClient'\nimport Product from '../components/Product'\nimport gql from 'graphql-tag'\n\nimport '../styles/Style.css'\n\nconst PRODUCTS_QUERY = gql`query{\n    products(first: 20) {\n    nodes {\n      productId\n      averageRating\n      slug\n      description\n      name\n      image {\n        uri\n        sourceUrl\n      }\n      ... on SimpleProduct {\n        id\n        name\n        price\n      }\n    }\n  }\n}`\nconst Index = (props) => {\n  // console.warn(props)\n  const { products } = props\n  console.log(products.length)\n  return (\n    <Layout>\n      <div className=\"product-container\">\n        {products.length > 0 ? (products.map(product => <Product product={product} key={product.id} />)) : ''}\n      </div>\n    </Layout>\n  )\n}\n\nIndex.getInitialProps = async () => {\n  // GRAPHQL METHOD\n  const result = await client.query({ query: PRODUCTS_QUERY })\n\n  return {\n    products: result.data.products.nodes\n  }\n  // REST API METHOD\n  // const res = await fetch(`${clientConfig.siteUrl}/getProducts`)\n  // const ProductData = await res.json()\n  // return {\n  //   products: JSON.parse(ProductData)\n  // }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}