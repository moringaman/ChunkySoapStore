{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"query{\\n    products(first: 20) {\\n    nodes {\\n      productId\\n      averageRating\\n      slug\\n      description\\n      name\\n      image {\\n        uri\\n        sourceUrl\\n      }\\n      ... on SimpleProduct {\\n        id\\n        name\\n        price\\n      }\\n    }\\n  }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport clientConfig from '../wooConfig';\nimport client from '../components/ApolloClient';\nimport Product from '../components/Product';\nimport gql from 'graphql-tag';\nimport '../styles/Style.css';\nvar PRODUCTS_QUERY = gql(_templateObject());\n\nvar Index = function Index(props) {\n  console.warn(props);\n  var products = props.products;\n  console.log(products.length);\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"product-container\"\n  }, products.length > 0 ? products.map(function (product) {\n    return __jsx(Product, {\n      product: product,\n      key: product.id\n    });\n  }) : ''));\n};\n\nIndex.getInitialProps = function _callee() {\n  var result;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(client.query({\n            query: PRODUCTS_QUERY\n          }));\n\n        case 2:\n          result = _context.sent;\n          return _context.abrupt(\"return\", {\n            products: result.products.nodes\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/webnostix/Codebase/REACT/woo-next/pages/index.js"],"names":["Layout","fetch","clientConfig","client","Product","gql","PRODUCTS_QUERY","Index","props","console","warn","products","log","length","map","product","id","getInitialProps","query","result","nodes"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAO,qBAAP;AAEA,IAAMC,cAAc,GAAGD,GAAH,mBAApB;;AAoBA,IAAME,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AACvBC,EAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AADuB,MAEfG,QAFe,GAEFH,KAFE,CAEfG,QAFe;AAGvBF,EAAAA,OAAO,CAACG,GAAR,CAAYD,QAAQ,CAACE,MAArB;AACA,SACE,MAAC,MAAD,QACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGF,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GAAuBF,QAAQ,CAACG,GAAT,CAAa,UAAAC,OAAO;AAAA,WAAI,MAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,OAAlB;AAA2B,MAAA,GAAG,EAAEA,OAAO,CAACC;AAAxC,MAAJ;AAAA,GAApB,CAAvB,GAAkG,EADrG,CADF,CADF;AAOD,CAXD;;AAaAT,KAAK,CAACU,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEDd,MAAM,CAACe,KAAP,CAAa;AAAEA,YAAAA,KAAK,EAAEZ;AAAT,WAAb,CAFC;;AAAA;AAEhBa,UAAAA,MAFgB;AAAA,2CAIf;AACLR,YAAAA,QAAQ,EAAEQ,MAAM,CAACR,QAAP,CAAgBS;AADrB,WAJe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAeA,eAAeb,KAAf","sourcesContent":["import Layout from '../components/Layout'\nimport fetch from 'isomorphic-unfetch'\nimport clientConfig from '../wooConfig'\nimport client from '../components/ApolloClient'\nimport Product from '../components/Product'\nimport gql from 'graphql-tag'\n\nimport '../styles/Style.css'\n\nconst PRODUCTS_QUERY = gql`query{\n    products(first: 20) {\n    nodes {\n      productId\n      averageRating\n      slug\n      description\n      name\n      image {\n        uri\n        sourceUrl\n      }\n      ... on SimpleProduct {\n        id\n        name\n        price\n      }\n    }\n  }\n}`\nconst Index = (props) => {\n  console.warn(props)\n  const { products } = props\n  console.log(products.length)\n  return (\n    <Layout>\n      <div className=\"product-container\">\n        {products.length > 0 ? (products.map(product => <Product product={product} key={product.id} />)) : ''}\n      </div>\n    </Layout>\n  )\n}\n\nIndex.getInitialProps = async () => {\n  // GRAPHQL METHOD\n  const result = await client.query({ query: PRODUCTS_QUERY })\n\n  return {\n    products: result.products.nodes\n  }\n  // REST API METHOD\n  // const res = await fetch(`${clientConfig.siteUrl}/getProducts`)\n  // const ProductData = await res.json()\n  // return {\n  //   products: JSON.parse(ProductData)\n  // }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}