{"ast":null,"code":"var _jsxFileName = \"/home/webnostix/Codebase/REACT/woo-next/pages/product.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from './../components/Layout';\nimport { withRouter } from 'next/router';\nimport client from '../components/ApolloClient';\nimport gql from 'graphql-tag';\n\nconst Product = props => {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Product\"));\n};\n\nProduct.getInitialProps = async context => {\n  let {\n    query: {\n      slug\n    }\n  } = context;\n  const id = slug ? parseInt(slug.split('-').pop()) : context.query.id;\n  console.warn(id);\n  const PRODUCT_QUERY = gql`query Product ($id: Int !) {\n    productBy( productId: ${id}) {\n        productId\n        averageRating\n        slug\n        description\n        name\n        image {\n          uri\n          sourceUrl\n        }\n        ... on SimpleProduct {\n          id\n          name\n          price\n        }\n      }\n  }`;\n  const res = await client.query({\n    query: PRODUCT_QUERY,\n    variables: {\n      id\n    }\n  });\n  return {\n    product: res.data.product\n  };\n};\n\nexport default withRouter(Product);","map":{"version":3,"sources":["/home/webnostix/Codebase/REACT/woo-next/pages/product.js"],"names":["Layout","withRouter","client","gql","Product","props","getInitialProps","context","query","slug","id","parseInt","split","pop","console","warn","PRODUCT_QUERY","res","variables","product","data"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF;AAKD,CAND;;AAQAD,OAAO,CAACE,eAAR,GAA0B,MAAOC,OAAP,IAAmB;AAC3C,MAAI;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AAAT,MAAsBF,OAA1B;AACA,QAAMG,EAAE,GAAGD,IAAI,GAAGE,QAAQ,CAACF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAAD,CAAX,GAAqCN,OAAO,CAACC,KAAR,CAAcE,EAAlE;AACAI,EAAAA,OAAO,CAACC,IAAR,CAAaL,EAAb;AACA,QAAMM,aAAa,GAAGb,GAAI;4BACAO,EAAG;;;;;;;;;;;;;;;;IAD7B;AAkBA,QAAMO,GAAG,GAAG,MAAMf,MAAM,CAACM,KAAP,CAAa;AAC7BA,IAAAA,KAAK,EAAEQ,aADsB;AAE7BE,IAAAA,SAAS,EAAE;AAACR,MAAAA;AAAD;AAFkB,GAAb,CAAlB;AAKA,SAAO;AACLS,IAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASD;AADb,GAAP;AAGD,CA9BD;;AAgCA,eAAelB,UAAU,CAACG,OAAD,CAAzB","sourcesContent":["import Layout from './../components/Layout'\nimport { withRouter } from 'next/router'\nimport client from '../components/ApolloClient'\nimport gql from 'graphql-tag'\n\nconst Product = (props) => {\n  return (\n    <Layout>\n      <div>Product</div>\n    </Layout>\n  )\n}\n\nProduct.getInitialProps = async (context) => {\n  let { query: { slug } } = context\n  const id = slug ? parseInt(slug.split('-').pop()) : context.query.id\n  console.warn(id)\n  const PRODUCT_QUERY = gql`query Product ($id: Int !) {\n    productBy( productId: ${id}) {\n        productId\n        averageRating\n        slug\n        description\n        name\n        image {\n          uri\n          sourceUrl\n        }\n        ... on SimpleProduct {\n          id\n          name\n          price\n        }\n      }\n  }`\n  const res = await client.query({\n    query: PRODUCT_QUERY,\n    variables: {id}\n  })\n\n  return {\n    product: res.data.product\n  }\n}\n\nexport default withRouter(Product)"]},"metadata":{},"sourceType":"module"}