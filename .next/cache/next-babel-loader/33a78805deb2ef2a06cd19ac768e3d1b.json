{"ast":null,"code":"export const getFloatValue = string => {\n  let floatVal = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  console.warn(floatVal);\n  return null !== floatVal ? parseFloat(parseFloat(floatVal).toFixed(2)) : '';\n};\n/**\n * @param  {} product\n * @param  {} =>{letproductPrice=getFloatValue(product.price\n * @param  {[]} letnewCart={products\n * @param  {1} totalProductsNumber\n * @param  {productPrice}constnewProduct=createNewProduct(product} totalProductsPrice\n * @param  {} productPrice\n * @param  {} 1\n * @param  {} newCart.products.push(newProduct\n * @param  {} localStorage.setItem('soap-cart'\n * @param  {} JSON.stringify(newCart\n */\n\nexport const addFirstProduct = product => {\n  let productPrice = getFloatValue(product.price);\n  let newCart = {\n    products: [],\n    totalProductsNumber: 1,\n    totalProductsPrice: productPrice\n  };\n  const newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem('soap-cart', JSON.stringify(newCart));\n  return newCart;\n};\n/** Create a new product object\n * @param  {} product\n * @param  {} productPrice\n * @param  {} qty\n * @param  {product.productId} =>{return{productID\n * @param  {product.image.sourceUrl} image\n * @param  {product.name} name\n * @param  {productPrice} price\n * @param  {qty} qty\n * @param  {parseFloat((productPrice*qty} totalPrice\n */\n\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productID: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  };\n};\nexport const updateCart = (existingCart, product, qty, newQuantity = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qty, newQuantity);\n\n  const addTotal = (total, item) => {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  };\n\n  let total = updatedProducts.reduce(addTotal, {\n    totalPrice: 0,\n    qty: 0\n  });\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsNumber: parseInt(total.qty),\n    totalProductsPrice: parseInt(total.totalPrice)\n  };\n  localStorage.setItem('soap-cart', JSON.stringify(updatedCart));\n  return updatedCart;\n};\n/** Get updated cart array\n * Update product if it exists\n * add the new product to existing cart\n * @param  {} existingCartProducts\n * @param  {} newProduct\n * @param  {} qty\n * @param  {} newQuantity=false\n * @param  {} =>{constproductExistsIndex=isProductInCart(existingCartProducts\n * @param  {} newProduct.productID\n * @param  {} if(productExistsIndex>-1\n * @param  {} {letupdatedProducts=existingCartProductsletupdatedProduct=updatedProducts[productExistsIndex];updatedProduct.qty=(newQuantity?parseInt(newQuantity\n */\n\nexport const getUpdatedProducts = (existingCartProducts, newProduct, qty, newQuantity = false) => {\n  // Check if product is already in cart\n  const productExistsIndex = isProductInCart(existingCartProducts, newProduct.productID); // if in cart update quantity by qty and recalculate total price\n\n  if (productExistsIndex > -1) {\n    let updatedProducts = existingCartProducts;\n    let updatedProduct = updatedProducts[productExistsIndex];\n    updatedProduct.qty = newQuantity ? parseInt(newQuantity) : parseInt(updatedProduct.qty + qty);\n    updatedProduct.totalPrice = parseFloat(updatedProduct.price * updatedProduct.qty).toFixed(2);\n    return updatedProducts;\n  } else {\n    // if not create new product and push onto array of products\n    let productPrice = getFloatValue(newProduct.price);\n    let newProduct = createNewProduct(product, productPrice, qty);\n    existingCartProducts.push(newProduct);\n    return existingCartProducts;\n  }\n};\n/** Return index of product is it exists in the cart\n * @param  {} existingCartProducts\n * @param  {} newProductId\n * @param  {} =>{returnItemThatExists=(item\n * @param  {} index\n * @param  {} =>{if(item.productID===newProductId\n * @param  {} {returnitem}}constnewArray=existingCartProducts.filter(returnItemThatExists\n * @param  {} returnexistingCartProducts.indexOf(newArray[0]\n */\n\nexport const isProductInCart = (existingCartProducts, newProductId) => {\n  returnItemThatExists = (item, index) => {\n    if (item.productID === newProductId) {\n      return item;\n    }\n  };\n\n  const newArray = existingCartProducts.filter(returnItemThatExists);\n  return existingCartProducts.indexOf(newArray[0]);\n};","map":{"version":3,"sources":["/home/webnostix/Codebase/REACT/woo-next/functions.js"],"names":["getFloatValue","string","floatVal","match","console","warn","parseFloat","toFixed","addFirstProduct","product","productPrice","price","newCart","products","totalProductsNumber","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","JSON","stringify","qty","productID","productId","image","name","totalPrice","updateCart","existingCart","newQuantity","updatedProducts","getUpdatedProducts","addTotal","total","item","reduce","updatedCart","parseInt","existingCartProducts","productExistsIndex","isProductInCart","updatedProduct","newProductId","returnItemThatExists","index","newArray","filter","indexOf"],"mappings":"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","sourcesContent":["export const getFloatValue = (string) => {\n  let floatVal = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0]\n  console.warn(floatVal)\n  return (null !== floatVal) ? parseFloat( parseFloat(floatVal).toFixed(2)): ''\n} \n\n/**\n * @param  {} product\n * @param  {} =>{letproductPrice=getFloatValue(product.price\n * @param  {[]} letnewCart={products\n * @param  {1} totalProductsNumber\n * @param  {productPrice}constnewProduct=createNewProduct(product} totalProductsPrice\n * @param  {} productPrice\n * @param  {} 1\n * @param  {} newCart.products.push(newProduct\n * @param  {} localStorage.setItem('soap-cart'\n * @param  {} JSON.stringify(newCart\n */\nexport const addFirstProduct = (product) => {\n  let productPrice = getFloatValue(product.price)\n  \n  let newCart = {\n    products: [],\n    totalProductsNumber: 1,\n    totalProductsPrice: productPrice\n  }\n\n  const newProduct = createNewProduct(product, productPrice, 1)\n  newCart.products.push(newProduct)\n  localStorage.setItem('soap-cart', JSON.stringify(newCart))\n  return newCart\n}\n\n/** Create a new product object\n * @param  {} product\n * @param  {} productPrice\n * @param  {} qty\n * @param  {product.productId} =>{return{productID\n * @param  {product.image.sourceUrl} image\n * @param  {product.name} name\n * @param  {productPrice} price\n * @param  {qty} qty\n * @param  {parseFloat((productPrice*qty} totalPrice\n */\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productID: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  }\n}\n\nexport const updateCart = (existingCart, product, qty, newQuantity = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qty, newQuantity) \n  const addTotal = (total, item) => {\n    total.totalPrice += item.totalPrice\n    total.qty += item.qty\n\n    return total\n  }\n\n  let total = updatedProducts.reduce(addTotal, {totalPrice: 0, qty: 0})\n\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsNumber: parseInt(total.qty),\n    totalProductsPrice: parseInt(total.totalPrice)\n  }\n\n  localStorage.setItem('soap-cart', JSON.stringify(updatedCart))\n  return updatedCart\n}\n\n/** Get updated cart array\n * Update product if it exists\n * add the new product to existing cart\n * @param  {} existingCartProducts\n * @param  {} newProduct\n * @param  {} qty\n * @param  {} newQuantity=false\n * @param  {} =>{constproductExistsIndex=isProductInCart(existingCartProducts\n * @param  {} newProduct.productID\n * @param  {} if(productExistsIndex>-1\n * @param  {} {letupdatedProducts=existingCartProductsletupdatedProduct=updatedProducts[productExistsIndex];updatedProduct.qty=(newQuantity?parseInt(newQuantity\n */\nexport const getUpdatedProducts = (existingCartProducts, newProduct, qty, newQuantity = false) => {\n  // Check if product is already in cart\n  const productExistsIndex = isProductInCart(existingCartProducts, newProduct.productID)\n  // if in cart update quantity by qty and recalculate total price\n  if (productExistsIndex > -1) {\n    let updatedProducts = existingCartProducts\n    let updatedProduct = updatedProducts[productExistsIndex];\n\n    updatedProduct.qty = (newQuantity ? parseInt(newQuantity) : parseInt(updatedProduct.qty +  qty))  \n    updatedProduct.totalPrice = parseFloat(updatedProduct.price * updatedProduct.qty).toFixed(2)\n    return updatedProducts\n  } else {\n  // if not create new product and push onto array of products\n    let productPrice = getFloatValue(newProduct.price)\n    let newProduct = createNewProduct(product, productPrice, qty)\n    existingCartProducts.push(newProduct)\n    return existingCartProducts\n  }\n}\n\n/** Return index of product is it exists in the cart\n * @param  {} existingCartProducts\n * @param  {} newProductId\n * @param  {} =>{returnItemThatExists=(item\n * @param  {} index\n * @param  {} =>{if(item.productID===newProductId\n * @param  {} {returnitem}}constnewArray=existingCartProducts.filter(returnItemThatExists\n * @param  {} returnexistingCartProducts.indexOf(newArray[0]\n */\nexport const isProductInCart = (existingCartProducts, newProductId) => {\n    returnItemThatExists = (item, index) => {\n      if (item.productID === newProductId) {\n        return item\n      }\n    }\n\n    const newArray = existingCartProducts.filter(returnItemThatExists)\n\n    return existingCartProducts.indexOf(newArray[0])\n}"]},"metadata":{},"sourceType":"module"}