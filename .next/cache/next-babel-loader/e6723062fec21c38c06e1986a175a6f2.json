{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nexport var getFloatValue = function getFloatValue(string) {\n  var floatVal = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  console.warn(floatVal);\n  return null !== floatVal ? _parseFloat(_parseFloat(floatVal).toFixed(2)) : '';\n};\n/**\n * @param  {} product\n * @param  {} =>{letproductPrice=getFloatValue(product.price\n * @param  {[]} letnewCart={products\n * @param  {1} totalProductsNumber\n * @param  {productPrice}constnewProduct=createNewProduct(product} totalProductsPrice\n * @param  {} productPrice\n * @param  {} 1\n * @param  {} newCart.products.push(newProduct\n * @param  {} localStorage.setItem('soap-cart'\n * @param  {} JSON.stringify(newCart\n */\n\nexport var addFirstProduct = function addFirstProduct(product) {\n  var productPrice = getFloatValue(product.price);\n  var newCart = {\n    products: [],\n    totalProductsNumber: 1,\n    totalProductsPrice: productPrice\n  };\n  var newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem('soap-cart', _JSON$stringify(newCart));\n  return newCart;\n};\n/**\n * @param  {} product\n * @param  {} productPrice\n * @param  {} qty\n * @param  {product.productId} =>{return{productID\n * @param  {product.image.sourceUrl} image\n * @param  {product.name} name\n * @param  {productPrice} price\n * @param  {qty} qty\n * @param  {parseFloat((productPrice*qty} totalPrice\n */\n\nexport var createNewProduct = function createNewProduct(product, productPrice, qty) {\n  return {\n    productID: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: _parseFloat((productPrice * qty).toFixed(2))\n  };\n};","map":{"version":3,"sources":["/home/webnostix/Codebase/REACT/woo-next/functions.js"],"names":["getFloatValue","string","floatVal","match","console","warn","toFixed","addFirstProduct","product","productPrice","price","newCart","products","totalProductsNumber","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","qty","productID","productId","image","name","totalPrice"],"mappings":";;AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAAY;AACvC,MAAIC,QAAQ,GAAGD,MAAM,CAACE,KAAP,CAAa,mBAAb,EAAkC,CAAlC,CAAf;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAaH,QAAb;AACA,SAAQ,SAASA,QAAV,GAAsB,YAAY,YAAWA,QAAX,EAAqBI,OAArB,CAA6B,CAA7B,CAAZ,CAAtB,GAAoE,EAA3E;AACD,CAJM;AAKP;;;;;;;;;;;;;AAYA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAa;AAC1C,MAAIC,YAAY,GAAGT,aAAa,CAACQ,OAAO,CAACE,KAAT,CAAhC;AAEA,MAAIC,OAAO,GAAG;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,mBAAmB,EAAE,CAFT;AAGZC,IAAAA,kBAAkB,EAAEL;AAHR,GAAd;AAMA,MAAMM,UAAU,GAAGC,gBAAgB,CAACR,OAAD,EAAUC,YAAV,EAAwB,CAAxB,CAAnC;AACAE,EAAAA,OAAO,CAACC,QAAR,CAAiBK,IAAjB,CAAsBF,UAAtB;AACAG,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkC,gBAAeR,OAAf,CAAlC;AACA,SAAOA,OAAP;AACD,CAbM;AAcP;;;;;;;;;;;;AAWA,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACR,OAAD,EAAUC,YAAV,EAAwBW,GAAxB,EAAgC;AAC9D,SAAO;AACLC,IAAAA,SAAS,EAAEb,OAAO,CAACc,SADd;AAELC,IAAAA,KAAK,EAAEf,OAAO,CAACe,KAFV;AAGLC,IAAAA,IAAI,EAAEhB,OAAO,CAACgB,IAHT;AAILd,IAAAA,KAAK,EAAED,YAJF;AAKLW,IAAAA,GAAG,EAAEA,GALA;AAMLK,IAAAA,UAAU,EAAE,YAAW,CAAChB,YAAY,GAAGW,GAAhB,EAAqBd,OAArB,CAA6B,CAA7B,CAAX;AANP,GAAP;AAQD,CATM","sourcesContent":["export const getFloatValue = (string) => {\n  let floatVal = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0]\n  console.warn(floatVal)\n  return (null !== floatVal) ? parseFloat( parseFloat(floatVal).toFixed(2)): ''\n} \n/**\n * @param  {} product\n * @param  {} =>{letproductPrice=getFloatValue(product.price\n * @param  {[]} letnewCart={products\n * @param  {1} totalProductsNumber\n * @param  {productPrice}constnewProduct=createNewProduct(product} totalProductsPrice\n * @param  {} productPrice\n * @param  {} 1\n * @param  {} newCart.products.push(newProduct\n * @param  {} localStorage.setItem('soap-cart'\n * @param  {} JSON.stringify(newCart\n */\nexport const addFirstProduct = (product) => {\n  let productPrice = getFloatValue(product.price)\n  \n  let newCart = {\n    products: [],\n    totalProductsNumber: 1,\n    totalProductsPrice: productPrice\n  }\n\n  const newProduct = createNewProduct(product, productPrice, 1)\n  newCart.products.push(newProduct)\n  localStorage.setItem('soap-cart', JSON.stringify(newCart))\n  return newCart\n}\n/**\n * @param  {} product\n * @param  {} productPrice\n * @param  {} qty\n * @param  {product.productId} =>{return{productID\n * @param  {product.image.sourceUrl} image\n * @param  {product.name} name\n * @param  {productPrice} price\n * @param  {qty} qty\n * @param  {parseFloat((productPrice*qty} totalPrice\n */\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productID: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  }\n}"]},"metadata":{},"sourceType":"module"}