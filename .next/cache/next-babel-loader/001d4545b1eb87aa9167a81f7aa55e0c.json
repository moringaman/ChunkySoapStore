{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/home/webnostix/Codebase/REACT/woo-next/pages/product.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"query Product($id: Int!) {\\n    productBy( productId: \", \") {\\n        productId\\n        averageRating\\n        slug\\n        description\\n        name\\n        image {\\n          uri\\n          sourceUrl\\n        }\\n        ... on SimpleProduct {\\n          id\\n          name\\n          price\\n        }\\n      }\\n    }\\n  }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from './../components/Layout';\nimport { withRouter } from 'next/router';\nimport client from '../components/ApolloClient';\nimport gql from 'graphql-tag';\n\nvar Product = function Product(props) {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Product\"));\n};\n\nProduct.getInitialProps = function _callee(context) {\n  var slug, id, PRODUCT_QUERY, res;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          slug = context.query.slug;\n          id = slug ? _parseInt(slug.split('_').pop()) : context.query.id;\n          PRODUCT_QUERY = gql(_templateObject(), id);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(client.query({\n            query: PRODUCT_QUERY,\n            variables: {\n              id: id\n            }\n          }));\n\n        case 5:\n          res = _context.sent;\n          return _context.abrupt(\"return\", {\n            product: res.data.product\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(Product);","map":{"version":3,"sources":["/home/webnostix/Codebase/REACT/woo-next/pages/product.js"],"names":["Layout","withRouter","client","gql","Product","props","getInitialProps","context","slug","query","id","split","pop","PRODUCT_QUERY","variables","res","product","data"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF;AAKD,CAND;;AAQAD,OAAO,CAACE,eAAR,GAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,UAAAA,IADS,GACED,OADF,CAClBE,KADkB,CACTD,IADS;AAElBE,UAAAA,EAFkB,GAEbF,IAAI,GAAG,UAASA,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAAT,CAAH,GAAqCL,OAAO,CAACE,KAAR,CAAcC,EAF1C;AAIlBG,UAAAA,aAJkB,GAIFV,GAJE,oBAKEO,EALF;AAAA;AAAA,2CAuBNR,MAAM,CAACO,KAAP,CAAa;AAC7BA,YAAAA,KAAK,EAAEI,aADsB;AAE7BC,YAAAA,SAAS,EAAE;AAACJ,cAAAA,EAAE,EAAFA;AAAD;AAFkB,WAAb,CAvBM;;AAAA;AAuBlBK,UAAAA,GAvBkB;AAAA,2CA4BjB;AACLC,YAAAA,OAAO,EAAED,GAAG,CAACE,IAAJ,CAASD;AADb,WA5BiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAiCA,eAAef,UAAU,CAACG,OAAD,CAAzB","sourcesContent":["import Layout from './../components/Layout'\nimport { withRouter } from 'next/router'\nimport client from '../components/ApolloClient'\nimport gql from 'graphql-tag'\n\nconst Product = (props) => {\n  return (\n    <Layout>\n      <div>Product</div>\n    </Layout>\n  )\n}\n\nProduct.getInitialProps = async (context) => {\n  let { query: { slug } } = context\n  const id = slug ? parseInt(slug.split('_').pop()) : context.query.id\n\n  const PRODUCT_QUERY = gql`query Product($id: Int!) {\n    productBy( productId: ${id}) {\n        productId\n        averageRating\n        slug\n        description\n        name\n        image {\n          uri\n          sourceUrl\n        }\n        ... on SimpleProduct {\n          id\n          name\n          price\n        }\n      }\n    }\n  }`\n  const res = await client.query({\n    query: PRODUCT_QUERY,\n    variables: {id}\n  })\n\n  return {\n    product: res.data.product\n  }\n}\n\nexport default withRouter(Product)"]},"metadata":{},"sourceType":"module"}