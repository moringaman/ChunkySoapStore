{"ast":null,"code":"export const getFloatValue = string => {\n  let floatVal = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  console.warn(floatVal);\n  return null !== floatVal ? parseFloat(parseFloat(floatVal).toFixed(2)) : '';\n};\nexport const addFirstProduct = product => {\n  let productPrice = getFloatValue(product.price);\n  let newCart = {\n    products: [],\n    totalProductsNumber: 1,\n    totalProductsPrice: productPrice\n  };\n  const newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem('soap-cart', JSON.stringify(newCart));\n};\n/**\n * @param  {} product\n * @param  {} productPrice\n * @param  {} qty\n * @param  {product.productId} =>{return{productID\n * @param  {product.image.sourceUrl} image\n * @param  {product.name} name\n * @param  {productPrice} price\n * @param  {qty} qty\n * @param  {parseFloat((productPrice*qty} totalPrice\n */\n\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productID: product.productId,\n    image: product.image.sourceUrl,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  };\n};","map":{"version":3,"sources":["/home/webnostix/Codebase/REACT/woo-next/functions.js"],"names":["getFloatValue","string","floatVal","match","console","warn","parseFloat","toFixed","addFirstProduct","product","productPrice","price","newCart","products","totalProductsNumber","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","JSON","stringify","qty","productID","productId","image","sourceUrl","name","totalPrice"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAIC,MAAD,IAAY;AACvC,MAAIC,QAAQ,GAAGD,MAAM,CAACE,KAAP,CAAa,mBAAb,EAAkC,CAAlC,CAAf;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAaH,QAAb;AACA,SAAQ,SAASA,QAAV,GAAsBI,UAAU,CAAEA,UAAU,CAACJ,QAAD,CAAV,CAAqBK,OAArB,CAA6B,CAA7B,CAAF,CAAhC,GAAoE,EAA3E;AACD,CAJM;AAMP,OAAO,MAAMC,eAAe,GAAIC,OAAD,IAAa;AAC1C,MAAIC,YAAY,GAAGV,aAAa,CAACS,OAAO,CAACE,KAAT,CAAhC;AAEA,MAAIC,OAAO,GAAG;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,mBAAmB,EAAE,CAFT;AAGZC,IAAAA,kBAAkB,EAAEL;AAHR,GAAd;AAMA,QAAMM,UAAU,GAAGC,gBAAgB,CAACR,OAAD,EAAUC,YAAV,EAAwB,CAAxB,CAAnC;AACAE,EAAAA,OAAO,CAACC,QAAR,CAAiBK,IAAjB,CAAsBF,UAAtB;AACAG,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeV,OAAf,CAAlC;AACD,CAZM;AAaP;;;;;;;;;;;;AAWA,OAAO,MAAMK,gBAAgB,GAAG,CAACR,OAAD,EAAUC,YAAV,EAAwBa,GAAxB,KAAgC;AAC9D,SAAO;AACLC,IAAAA,SAAS,EAAEf,OAAO,CAACgB,SADd;AAELC,IAAAA,KAAK,EAAEjB,OAAO,CAACiB,KAAR,CAAcC,SAFhB;AAGLC,IAAAA,IAAI,EAAEnB,OAAO,CAACmB,IAHT;AAILjB,IAAAA,KAAK,EAAED,YAJF;AAKLa,IAAAA,GAAG,EAAEA,GALA;AAMLM,IAAAA,UAAU,EAAEvB,UAAU,CAAC,CAACI,YAAY,GAAGa,GAAhB,EAAqBhB,OAArB,CAA6B,CAA7B,CAAD;AANjB,GAAP;AAQD,CATM","sourcesContent":["export const getFloatValue = (string) => {\n  let floatVal = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0]\n  console.warn(floatVal)\n  return (null !== floatVal) ? parseFloat( parseFloat(floatVal).toFixed(2)): ''\n} \n\nexport const addFirstProduct = (product) => {\n  let productPrice = getFloatValue(product.price)\n  \n  let newCart = {\n    products: [],\n    totalProductsNumber: 1,\n    totalProductsPrice: productPrice\n  }\n\n  const newProduct = createNewProduct(product, productPrice, 1)\n  newCart.products.push(newProduct)\n  localStorage.setItem('soap-cart', JSON.stringify(newCart))\n}\n/**\n * @param  {} product\n * @param  {} productPrice\n * @param  {} qty\n * @param  {product.productId} =>{return{productID\n * @param  {product.image.sourceUrl} image\n * @param  {product.name} name\n * @param  {productPrice} price\n * @param  {qty} qty\n * @param  {parseFloat((productPrice*qty} totalPrice\n */\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productID: product.productId,\n    image: product.image.sourceUrl,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  }\n}"]},"metadata":{},"sourceType":"module"}