{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nexport var getFloatValue = function getFloatValue(string) {\n  var floatVal = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  console.warn(floatVal);\n  return null !== floatVal ? _parseFloat(_parseFloat(floatVal).toFixed(2)) : '';\n};\n/**\n * @param  {} product\n * @param  {} =>{letproductPrice=getFloatValue(product.price\n * @param  {[]} letnewCart={products\n * @param  {1} totalProductsNumber\n * @param  {productPrice}constnewProduct=createNewProduct(product} totalProductsPrice\n * @param  {} productPrice\n * @param  {} 1\n * @param  {} newCart.products.push(newProduct\n * @param  {} localStorage.setItem('soap-cart'\n * @param  {} JSON.stringify(newCart\n */\n\nexport var addFirstProduct = function addFirstProduct(product) {\n  var productPrice = getFloatValue(product.price);\n  var newCart = {\n    products: [],\n    totalProductsNumber: 1,\n    totalProductsPrice: productPrice\n  };\n  var newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem('soap-cart', _JSON$stringify(newCart));\n  return newCart;\n};\n/** Create a new product object\n * @param  {} product\n * @param  {} productPrice\n * @param  {} qty\n * @param  {product.productId} =>{return{productID\n * @param  {product.image.sourceUrl} image\n * @param  {product.name} name\n * @param  {productPrice} price\n * @param  {qty} qty\n * @param  {parseFloat((productPrice*qty} totalPrice\n */\n\nexport var createNewProduct = function createNewProduct(product, productPrice, qty) {\n  return {\n    productID: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: _parseFloat((productPrice * qty).toFixed(2))\n  };\n};\nexport var updateCart = function updateCart(existingCart, product, qty) {\n  var newQuantity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var updatedProducts = getUpdatedProducts(existingCart.products, product, qty, newQuantity);\n\n  var addTotal = function addTotal(total, item) {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  };\n\n  var total = updatedProducts.reduce(addTotal, {\n    totalPrice: 0,\n    qty: 0\n  });\n  var updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: _parseInt(total.qty),\n    totalProductsPrice: _parseInt(total.totalPrice)\n  };\n  return updatedCart;\n};\n/** Get updated cart array\n * Update product if it exists\n * add the new product to existing cart\n * @param  {} existingCartProducts\n * @param  {} newProduct\n * @param  {} qty\n * @param  {} newQuantity=false\n * @param  {} =>{constproductExistsIndex=isProductInCart(existingCartProducts\n * @param  {} newProduct.productID\n * @param  {} if(productExistsIndex>-1\n * @param  {} {letupdatedProducts=existingCartProductsletupdatedProduct=updatedProducts[productExistsIndex];updatedProduct.qty=(newQuantity?parseInt(newQuantity\n */\n\nexport var getUpdatedProducts = function getUpdatedProducts(existingCartProducts, newProduct, qty) {\n  var newQuantity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  // Check if product is already in cart\n  var productExistsIndex = isProductInCart(existingCartProducts, newProduct.productID); // if in cart update quantity by qty and recalculate total price\n\n  if (productExistsIndex > -1) {\n    var updatedProducts = existingCartProducts;\n    var updatedProduct = updatedProducts[productExistsIndex];\n    updatedProduct.qty = newQuantity ? _parseInt(newQuantity) : _parseInt(updatedProduct.qty + qty);\n    updatedProduct.totalPrice = _parseFloat(updatedProduct.price * updatedProduct.qty).toFixed(2);\n    return updatedProduct;\n  } else {\n    // if not create new product and push onto array of products\n    var productPrice = getFloatValue(_newProduct.price);\n\n    var _newProduct = createNewProduct(product, productPrice, qty);\n\n    existingCartProducts.push(_newProduct);\n    return existingCartProducts;\n  }\n};\n/** Return index of product is it exists in the cart\n * @param  {} existingCartProducts\n * @param  {} newProductId\n * @param  {} =>{returnItemThatExists=(item\n * @param  {} index\n * @param  {} =>{if(item.productID===newProductId\n * @param  {} {returnitem}}constnewArray=existingCartProducts.filter(returnItemThatExists\n * @param  {} returnexistingCartProducts.indexOf(newArray[0]\n */\n\nexport var isProductInCart = function isProductInCart(existingCartProducts, newProductId) {\n  returnItemThatExists = function returnItemThatExists(item, index) {\n    if (item.productID === newProductId) {\n      return item;\n    }\n  };\n\n  var newArray = existingCartProducts.filter(returnItemThatExists);\n  return existingCartProducts.indexOf(newArray[0]);\n};","map":{"version":3,"sources":["/home/webnostix/Codebase/REACT/woo-next/functions.js"],"names":["getFloatValue","string","floatVal","match","console","warn","toFixed","addFirstProduct","product","productPrice","price","newCart","products","totalProductsNumber","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","qty","productID","productId","image","name","totalPrice","updateCart","existingCart","newQuantity","updatedProducts","getUpdatedProducts","addTotal","total","item","reduce","updatedCart","totalProductsCount","existingCartProducts","productExistsIndex","isProductInCart","updatedProduct","newProductId","returnItemThatExists","index","newArray","filter","indexOf"],"mappings":"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","sourcesContent":["export const getFloatValue = (string) => {\n  let floatVal = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0]\n  console.warn(floatVal)\n  return (null !== floatVal) ? parseFloat( parseFloat(floatVal).toFixed(2)): ''\n} \n\n/**\n * @param  {} product\n * @param  {} =>{letproductPrice=getFloatValue(product.price\n * @param  {[]} letnewCart={products\n * @param  {1} totalProductsNumber\n * @param  {productPrice}constnewProduct=createNewProduct(product} totalProductsPrice\n * @param  {} productPrice\n * @param  {} 1\n * @param  {} newCart.products.push(newProduct\n * @param  {} localStorage.setItem('soap-cart'\n * @param  {} JSON.stringify(newCart\n */\nexport const addFirstProduct = (product) => {\n  let productPrice = getFloatValue(product.price)\n  \n  let newCart = {\n    products: [],\n    totalProductsNumber: 1,\n    totalProductsPrice: productPrice\n  }\n\n  const newProduct = createNewProduct(product, productPrice, 1)\n  newCart.products.push(newProduct)\n  localStorage.setItem('soap-cart', JSON.stringify(newCart))\n  return newCart\n}\n\n/** Create a new product object\n * @param  {} product\n * @param  {} productPrice\n * @param  {} qty\n * @param  {product.productId} =>{return{productID\n * @param  {product.image.sourceUrl} image\n * @param  {product.name} name\n * @param  {productPrice} price\n * @param  {qty} qty\n * @param  {parseFloat((productPrice*qty} totalPrice\n */\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productID: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  }\n}\n\nexport const updateCart = (existingCart, product, qty, newQuantity = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qty, newQuantity) \n  const addTotal = (total, item) => {\n    total.totalPrice += item.totalPrice\n    total.qty += item.qty\n\n    return total\n  }\n\n  let total = updatedProducts.reduce(addTotal, {totalPrice: 0, qty: 0})\n\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: parseInt(total.qty),\n    totalProductsPrice: parseInt(total.totalPrice)\n  }\n\n  return updatedCart\n}\n\n/** Get updated cart array\n * Update product if it exists\n * add the new product to existing cart\n * @param  {} existingCartProducts\n * @param  {} newProduct\n * @param  {} qty\n * @param  {} newQuantity=false\n * @param  {} =>{constproductExistsIndex=isProductInCart(existingCartProducts\n * @param  {} newProduct.productID\n * @param  {} if(productExistsIndex>-1\n * @param  {} {letupdatedProducts=existingCartProductsletupdatedProduct=updatedProducts[productExistsIndex];updatedProduct.qty=(newQuantity?parseInt(newQuantity\n */\nexport const getUpdatedProducts = (existingCartProducts, newProduct, qty, newQuantity = false) => {\n  // Check if product is already in cart\n  const productExistsIndex = isProductInCart(existingCartProducts, newProduct.productID)\n  // if in cart update quantity by qty and recalculate total price\n  if (productExistsIndex > -1) {\n    let updatedProducts = existingCartProducts\n    let updatedProduct = updatedProducts[productExistsIndex];\n\n    updatedProduct.qty = (newQuantity ? parseInt(newQuantity) : parseInt(updatedProduct.qty +  qty))  \n    updatedProduct.totalPrice = parseFloat(updatedProduct.price * updatedProduct.qty).toFixed(2)\n    return updatedProduct\n  } else {\n  // if not create new product and push onto array of products\n    let productPrice = getFloatValue(newProduct.price)\n    let newProduct = createNewProduct(product, productPrice, qty)\n    existingCartProducts.push(newProduct)\n    return existingCartProducts\n  }\n}\n\n/** Return index of product is it exists in the cart\n * @param  {} existingCartProducts\n * @param  {} newProductId\n * @param  {} =>{returnItemThatExists=(item\n * @param  {} index\n * @param  {} =>{if(item.productID===newProductId\n * @param  {} {returnitem}}constnewArray=existingCartProducts.filter(returnItemThatExists\n * @param  {} returnexistingCartProducts.indexOf(newArray[0]\n */\nexport const isProductInCart = (existingCartProducts, newProductId) => {\n    returnItemThatExists = (item, index) => {\n      if (item.productID === newProductId) {\n        return item\n      }\n    }\n\n    const newArray = existingCartProducts.filter(returnItemThatExists)\n\n    return existingCartProducts.indexOf(newArray[0])\n}"]},"metadata":{},"sourceType":"module"}